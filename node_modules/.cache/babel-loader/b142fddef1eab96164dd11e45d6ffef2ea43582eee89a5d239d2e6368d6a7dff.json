{"ast":null,"code":"var _jsxFileName = \"/Users/yashvimehta/Downloads/ramp-fe-challenge/src/App.tsx\",\n  _s = $RefreshSig$();\nimport { Fragment, useCallback, useEffect, useMemo, useState } from \"react\";\nimport { InputSelect } from \"./components/InputSelect\";\nimport { Instructions } from \"./components/Instructions\";\nimport { Transactions } from \"./components/Transactions\";\nimport { useEmployees } from \"./hooks/useEmployees\";\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\";\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\";\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport function App() {\n  _s();\n  const {\n    data: employees,\n    ...employeeUtils\n  } = useEmployees();\n  const {\n    data: paginatedTransactions,\n    ...paginatedTransactionsUtils\n  } = usePaginatedTransactions();\n  const {\n    data: transactionsByEmployee,\n    ...transactionsByEmployeeUtils\n  } = useTransactionsByEmployee();\n  const [isLoading, setIsLoading] = useState(false);\n  const [isEmployee, setEmployee] = useState(false);\n  const transactions = useMemo(() => {\n    var _ref, _paginatedTransaction;\n    return (_ref = (_paginatedTransaction = paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.data) !== null && _paginatedTransaction !== void 0 ? _paginatedTransaction : transactionsByEmployee) !== null && _ref !== void 0 ? _ref : null;\n  }, [paginatedTransactions, transactionsByEmployee]);\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true);\n    transactionsByEmployeeUtils.invalidateData();\n    await employeeUtils.fetchAll();\n    await paginatedTransactionsUtils.fetchAll();\n    setIsLoading(false);\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const loadTransactionsByEmployee = useCallback(async employeeId => {\n    paginatedTransactionsUtils.invalidateData();\n    if (!employeeId || employeeId === \"all\") {\n      /*bug 3 fix */\n      await paginatedTransactionsUtils.fetchAll();\n    } else {\n      await transactionsByEmployeeUtils.fetchById(employeeId);\n    }\n  }, [paginatedTransactionsUtils, transactionsByEmployeeUtils]);\n  const handleEmployee = useCallback(async newValue => {\n    setEmployee(false);\n    if (newValue === null) {\n      return;\n    } else if (newValue.id === EMPTY_EMPLOYEE.id) {\n      await loadAllTransactions();\n    } else {\n      setEmployee(true);\n      await loadTransactionsByEmployee(newValue.id);\n    }\n  }, [loadAllTransactions, loadTransactionsByEmployee]);\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions();\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions]);\n  const notHideButton = (paginatedTransactions === null || paginatedTransactions === void 0 ? void 0 : paginatedTransactions.nextPage) !== null; /* bug 6 fix */\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"MainContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Instructions, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(InputSelect, {\n        // isLoading={isLoading} /* bug 5 fix - not showing loading employees */\n        defaultValue: EMPTY_EMPLOYEE,\n        items: employees === null ? [] : [EMPTY_EMPLOYEE, ...employees],\n        label: \"Filter by employee\",\n        loadingLabel: \"Loading employees\",\n        parseItem: item => ({\n          value: item.id,\n          label: `${item.firstName} ${item.lastName}`\n        }),\n        onChange: handleEmployee\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampBreak--l\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampGrid\",\n        children: [/*#__PURE__*/_jsxDEV(Transactions, {\n          transactions: transactions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), transactions != null && isEmployee && notHideButton && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"RampButton\",\n          disabled: paginatedTransactionsUtils.loading,\n          onClick: async () => {\n            await loadAllTransactions();\n          },\n          children: \"View More\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"rN0OLEL8kHhBHH91GmPhNUFxw3Y=\", false, function () {\n  return [useEmployees, usePaginatedTransactions, useTransactionsByEmployee];\n});\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Fragment","useCallback","useEffect","useMemo","useState","InputSelect","Instructions","Transactions","useEmployees","usePaginatedTransactions","useTransactionsByEmployee","EMPTY_EMPLOYEE","jsxDEV","_jsxDEV","App","_s","data","employees","employeeUtils","paginatedTransactions","paginatedTransactionsUtils","transactionsByEmployee","transactionsByEmployeeUtils","isLoading","setIsLoading","isEmployee","setEmployee","transactions","_ref","_paginatedTransaction","loadAllTransactions","invalidateData","fetchAll","loadTransactionsByEmployee","employeeId","fetchById","handleEmployee","newValue","id","loading","notHideButton","nextPage","children","className","fileName","_jsxFileName","lineNumber","columnNumber","defaultValue","items","label","loadingLabel","parseItem","item","value","firstName","lastName","onChange","disabled","onClick","_c","$RefreshReg$"],"sources":["/Users/yashvimehta/Downloads/ramp-fe-challenge/src/App.tsx"],"sourcesContent":["import { Fragment, useCallback, useEffect, useMemo, useState } from \"react\"\nimport { InputSelect } from \"./components/InputSelect\"\nimport { Instructions } from \"./components/Instructions\"\nimport { Transactions } from \"./components/Transactions\"\nimport { useEmployees } from \"./hooks/useEmployees\"\nimport { usePaginatedTransactions } from \"./hooks/usePaginatedTransactions\"\nimport { useTransactionsByEmployee } from \"./hooks/useTransactionsByEmployee\"\nimport { EMPTY_EMPLOYEE } from \"./utils/constants\"\nimport { Employee } from \"./utils/types\"\n\nexport function App() {\n  const { data: employees, ...employeeUtils } = useEmployees()\n  const { data: paginatedTransactions, ...paginatedTransactionsUtils } = usePaginatedTransactions()\n  const { data: transactionsByEmployee, ...transactionsByEmployeeUtils } = useTransactionsByEmployee()\n  const [isLoading, setIsLoading] = useState(false)\n  const [isEmployee, setEmployee] = useState(false);\n\n\n  const transactions = useMemo(\n    () => paginatedTransactions?.data ?? transactionsByEmployee ?? null,\n    [paginatedTransactions, transactionsByEmployee]\n  )\n\n  const loadAllTransactions = useCallback(async () => {\n    setIsLoading(true)\n    transactionsByEmployeeUtils.invalidateData()\n\n    await employeeUtils.fetchAll()\n    await paginatedTransactionsUtils.fetchAll()\n\n    setIsLoading(false)\n  }, [employeeUtils, paginatedTransactionsUtils, transactionsByEmployeeUtils])\n\n\n  const loadTransactionsByEmployee = useCallback(\n    async (employeeId: string | null) => {\n       paginatedTransactionsUtils.invalidateData();\n       if (!employeeId || employeeId === \"all\") {  /*bug 3 fix */\n         await paginatedTransactionsUtils.fetchAll();\n       } else {\n         await transactionsByEmployeeUtils.fetchById(employeeId);\n       }\n    },\n    [paginatedTransactionsUtils, transactionsByEmployeeUtils]\n   )\n\n   const handleEmployee = useCallback(\n    async (newValue: Employee | null) => {\n      setEmployee(false)\n      if (newValue === null) {\n        return\n      } else if (newValue.id === EMPTY_EMPLOYEE.id) {\n        await loadAllTransactions()\n      } else {\n        setEmployee(true)\n        await loadTransactionsByEmployee(newValue.id)\n      }\n    }, [loadAllTransactions, loadTransactionsByEmployee])\n\n\n\n  useEffect(() => {\n    if (employees === null && !employeeUtils.loading) {\n      loadAllTransactions()\n    }\n  }, [employeeUtils.loading, employees, loadAllTransactions])\n\n  const notHideButton  = paginatedTransactions?.nextPage !== null /* bug 6 fix */\n  return (\n    <Fragment>\n      <main className=\"MainContainer\">\n        <Instructions />\n\n        <hr className=\"RampBreak--l\" />\n\n        <InputSelect<Employee>\n          // isLoading={isLoading} /* bug 5 fix - not showing loading employees */\n          defaultValue={EMPTY_EMPLOYEE}\n          items={employees === null ? [] : [EMPTY_EMPLOYEE, ...employees]}\n          label=\"Filter by employee\"\n          loadingLabel=\"Loading employees\"\n          \n          parseItem={(item) => ({\n            value: item.id,\n            label: `${item.firstName} ${item.lastName}`,\n          })}\n          onChange={handleEmployee}\n        />\n\n        <div className=\"RampBreak--l\" />\n\n        <div className=\"RampGrid\">\n          <Transactions transactions={transactions} />\n\n          {transactions!=null  && isEmployee && notHideButton &&(\n            <button\n              className=\"RampButton\"\n              disabled={paginatedTransactionsUtils.loading}\n              onClick={async () => {\n                await loadAllTransactions()\n              }}\n            >\n              View More\n            </button>\n          )}\n        </div>\n      </main>\n    </Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}