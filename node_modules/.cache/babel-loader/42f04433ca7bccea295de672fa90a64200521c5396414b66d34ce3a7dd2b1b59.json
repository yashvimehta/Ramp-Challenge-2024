{"ast":null,"code":"var _jsxFileName = \"/Users/yashvimehta/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx\",\n  _s = $RefreshSig$();\nimport Downshift from \"downshift\";\nimport { useCallback, useState } from \"react\";\nimport classNames from \"classnames\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport function InputSelect({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel\n}) {\n  _s();\n  const [selectedValue, setSelectedValue] = useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : null);\n  const [dropdownPosition, setDropdownPosition] = useState({\n    top: 0,\n    left: 0\n  });\n  const onChange = useCallback(selectedItem => {\n    if (selectedItem === null) {\n      return;\n    }\n    if (selectedItem === \"All Employees\") {\n      setSelectedValue(null);\n      consumerOnChange(null);\n    } else {\n      const parsedSelectedItem = parseItem(selectedItem);\n      if (!parsedSelectedItem.value) {\n        console.error(\"Employee id cannot be empty\");\n        return;\n      }\n      setSelectedValue(selectedItem);\n      consumerOnChange(selectedItem);\n    }\n  }, [consumerOnChange]);\n  return /*#__PURE__*/_jsxDEV(Downshift, {\n    id: \"RampSelect\",\n    onChange: onChange,\n    selectedItem: selectedValue,\n    itemToString: item => item ? parseItem(item).label : \"\",\n    children: ({\n      getItemProps,\n      getLabelProps,\n      getMenuProps,\n      isOpen,\n      highlightedIndex,\n      selectedItem,\n      getToggleButtonProps,\n      inputValue\n    }) => {\n      const toggleProps = getToggleButtonProps();\n      const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"RampInputSelect--root\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"RampText--s RampText--hushed\",\n          ...getLabelProps(),\n          children: label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampBreak--xs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"RampInputSelect--input\",\n          onClick: event => {\n            setDropdownPosition(getDropdownPosition(event.target));\n            toggleProps.onClick(event);\n          },\n          children: inputValue\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classNames(\"RampInputSelect--dropdown-container\", {\n            \"RampInputSelect--dropdown-container-opened\": isOpen\n          }),\n          ...getMenuProps(),\n          style: {\n            top: dropdownPosition.top,\n            left: dropdownPosition.left\n          },\n          children: renderItems()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this);\n      function renderItems() {\n        if (!isOpen) {\n          return null;\n        }\n        if (isLoading) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: [loadingLabel, \"...\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 20\n          }, this);\n        }\n        if (items.length === 0) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"RampInputSelect--dropdown-item\",\n            children: \"No items\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 20\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            ...getItemProps({\n              key: \"All Employees\",\n              item: \"All Employees\",\n              // Cast \"All Employees\" to TItem\n              className: classNames(\"RampInputSelect--dropdown-item\", {\n                \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === -1,\n                \"RampInputSelect--dropdown-item-selected\": selectedItem === null\n              })\n            }),\n            children: \"All Employees\"\n          }, \"All Employees\", false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this), items.map((item, index) => {\n            const parsedItem = parseItem(item);\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              ...getItemProps({\n                key: parsedItem.value,\n                index,\n                item,\n                className: classNames(\"RampInputSelect--dropdown-item\", {\n                  \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                  \"RampInputSelect--dropdown-item-selected\": (parsedSelectedItem === null || parsedSelectedItem === void 0 ? void 0 : parsedSelectedItem.value) === parsedItem.value\n                })\n              }),\n              children: parsedItem.label\n            }, parsedItem.value, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 19\n            }, this);\n          })]\n        }, void 0, true);\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(InputSelect, \"P/yBOClT+tikRlX+sSLK7WIsfTo=\");\n_c = InputSelect;\nconst getDropdownPosition = target => {\n  if (target instanceof Element) {\n    const {\n      top,\n      left\n    } = target.getBoundingClientRect();\n    const {\n      scrollY\n    } = window;\n    return {\n      top: scrollY + top + 63,\n      left\n    };\n  }\n  return {\n    top: 0,\n    left: 0\n  };\n};\nvar _c;\n$RefreshReg$(_c, \"InputSelect\");","map":{"version":3,"names":["Downshift","useCallback","useState","classNames","jsxDEV","_jsxDEV","Fragment","_Fragment","InputSelect","label","defaultValue","onChange","consumerOnChange","items","parseItem","isLoading","loadingLabel","_s","selectedValue","setSelectedValue","dropdownPosition","setDropdownPosition","top","left","selectedItem","parsedSelectedItem","value","console","error","id","itemToString","item","children","getItemProps","getLabelProps","getMenuProps","isOpen","highlightedIndex","getToggleButtonProps","inputValue","toggleProps","className","fileName","_jsxFileName","lineNumber","columnNumber","onClick","event","getDropdownPosition","target","style","renderItems","length","key","map","index","parsedItem","_c","Element","getBoundingClientRect","scrollY","window","$RefreshReg$"],"sources":["/Users/yashvimehta/Downloads/ramp-fe-challenge/src/components/InputSelect/index.tsx"],"sourcesContent":["import Downshift from \"downshift\"\nimport { useCallback, useState } from \"react\"\nimport classNames from \"classnames\"\nimport { DropdownPosition, GetDropdownPositionFn, InputSelectOnChange, InputSelectProps } from \"./types\"\n\nexport function InputSelect<TItem>({\n  label,\n  defaultValue,\n  onChange: consumerOnChange,\n  items,\n  parseItem,\n  isLoading,\n  loadingLabel,\n}: InputSelectProps<TItem>) {\n  const [selectedValue, setSelectedValue] = useState<TItem | null>(defaultValue ?? null)\n  const [dropdownPosition, setDropdownPosition] = useState<DropdownPosition>({\n    top: 0,\n    left: 0,\n  })\n\n  const onChange = useCallback<InputSelectOnChange<TItem>>(\n    (selectedItem) => {\n      if (selectedItem === null) {\n        return;\n      }\n  \n      if (selectedItem === \"All Employees\") {\n        setSelectedValue(null); \n        consumerOnChange(null); \n      } else {\n        const parsedSelectedItem = parseItem(selectedItem);\n        if (!parsedSelectedItem.value) {\n          console.error(\"Employee id cannot be empty\");\n          return;\n        }\n        setSelectedValue(selectedItem); \n        consumerOnChange(selectedItem); \n      }\n    },\n    [consumerOnChange]\n  );\n  \n  return (\n    <Downshift<TItem>\n      id=\"RampSelect\"\n      onChange={onChange}\n      selectedItem={selectedValue}\n      itemToString={(item) => (item ? parseItem(item).label : \"\")}\n    >\n      {({\n        getItemProps,\n        getLabelProps,\n        getMenuProps,\n        isOpen,\n        highlightedIndex,\n        selectedItem,\n        getToggleButtonProps,\n        inputValue,\n      }) => {\n        const toggleProps = getToggleButtonProps()\n        const parsedSelectedItem = selectedItem === null ? null : parseItem(selectedItem)\n\n        return (\n          <div className=\"RampInputSelect--root\">\n            <label className=\"RampText--s RampText--hushed\" {...getLabelProps()}>\n              {label}\n            </label>\n            <div className=\"RampBreak--xs\" />\n            <div\n              className=\"RampInputSelect--input\"\n              onClick={(event) => {\n                setDropdownPosition(getDropdownPosition(event.target))\n                toggleProps.onClick(event)\n              }}\n            >\n              {inputValue}\n            </div>\n\n            <div\n              className={classNames(\"RampInputSelect--dropdown-container\", {\n                \"RampInputSelect--dropdown-container-opened\": isOpen,\n              })}\n              {...getMenuProps()}\n              style={{ top: dropdownPosition.top, left: dropdownPosition.left }}\n            >\n              {renderItems()}\n            </div>\n          </div>\n        )\n\n        \n        function renderItems() {\n          if (!isOpen) {\n            return null;\n          }\n        \n          if (isLoading) {\n            return <div className=\"RampInputSelect--dropdown-item\">{loadingLabel}...</div>;\n          }\n        \n          if (items.length === 0) {\n            return <div className=\"RampInputSelect--dropdown-item\">No items</div>;\n          }\n        \n          \n          return (\n            <>\n              <div\n                key=\"All Employees\"\n                {...getItemProps({\n                  key: \"All Employees\",\n                  item: \"All Employees\" as TItem, // Cast \"All Employees\" to TItem\n                  className: classNames(\"RampInputSelect--dropdown-item\", {\n                    \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === -1,\n                    \"RampInputSelect--dropdown-item-selected\": selectedItem === null,\n                  }),\n                })}\n              >\n                All Employees\n              </div>\n              {items.map((item, index) => {\n                const parsedItem = parseItem(item);\n                return (\n                  <div\n                    key={parsedItem.value}\n                    {...getItemProps({\n                      key: parsedItem.value,\n                      index,\n                      item,\n                      className: classNames(\"RampInputSelect--dropdown-item\", {\n                        \"RampInputSelect--dropdown-item-highlighted\": highlightedIndex === index,\n                        \"RampInputSelect--dropdown-item-selected\":\n                          parsedSelectedItem?.value === parsedItem.value,\n                      }),\n                    })}\n                  >\n                    {parsedItem.label}\n                  </div>\n                );\n              })}\n            </>\n          );\n          \n          \n        }\n        \n      }}\n    </Downshift>\n  )\n}\n\nconst getDropdownPosition: GetDropdownPositionFn = (target) => {\n  if (target instanceof Element) {\n    const { top, left } = target.getBoundingClientRect()\n    const { scrollY } = window\n    return {\n      top: scrollY + top + 63,\n      left,\n    }\n  }\n\n  return { top: 0, left: 0 }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}