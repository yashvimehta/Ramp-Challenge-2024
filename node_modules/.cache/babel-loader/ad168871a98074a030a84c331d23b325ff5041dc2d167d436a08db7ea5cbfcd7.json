{"ast":null,"code":"import mockData from \"../mock-data.json\";\nconst TRANSACTIONS_PER_PAGE = 10;\nconst data = {\n  employees: mockData.employees,\n  transactions: mockData.transactions\n};\nexport const getEmployees = () => data.employees;\nexport const getTransactionsPaginated = ({\n  page\n}) => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\");\n  }\n  const start = page * TRANSACTIONS_PER_PAGE;\n  const end = start + TRANSACTIONS_PER_PAGE;\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`);\n  }\n  const nextPage = end < data.transactions.length ? page + 1 : null;\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end)\n  };\n};\nexport const getTransactionsByEmployee = ({\n  employeeId\n}) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\");\n  }\n  return data.transactions.filter(transaction => transaction.employee.id === employeeId);\n};\nexport const setTransactionApproval = ({\n  transactionId,\n  value\n}) => {\n  const transaction = data.transactions.find(currentTransaction => currentTransaction.id === transactionId);\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\");\n  }\n  transaction.approved = value;\n};","map":{"version":3,"names":["mockData","TRANSACTIONS_PER_PAGE","data","employees","transactions","getEmployees","getTransactionsPaginated","page","Error","start","end","length","nextPage","slice","getTransactionsByEmployee","employeeId","filter","transaction","employee","id","setTransactionApproval","transactionId","value","find","currentTransaction","approved"],"sources":["/Users/yashvimehta/Downloads/ramp-fe-challenge/src/utils/requests.ts"],"sourcesContent":["import {\n  PaginatedRequestParams,\n  PaginatedResponse,\n  RequestByEmployeeParams,\n  SetTransactionApprovalParams,\n  Transaction,\n  Employee,\n} from \"./types\"\nimport mockData from \"../mock-data.json\"\n\nconst TRANSACTIONS_PER_PAGE = 10\n\nconst data: { employees: Employee[]; transactions: Transaction[] } = {\n  employees: mockData.employees,\n  transactions: mockData.transactions,\n}\n\nexport const getEmployees = (): Employee[] => data.employees\n\nexport const getTransactionsPaginated = ({\n  page,\n}: PaginatedRequestParams): PaginatedResponse<Transaction[]> => {\n  if (page === null) {\n    throw new Error(\"Page cannot be null\")\n  }\n\n  const start = page * TRANSACTIONS_PER_PAGE\n  const end = start + TRANSACTIONS_PER_PAGE\n\n  if (start > data.transactions.length) {\n    throw new Error(`Invalid page ${page}`)\n  }\n\n  const nextPage = end < data.transactions.length ? page + 1 : null\n\n  return {\n    nextPage,\n    data: data.transactions.slice(start, end),\n  }\n}\n\nexport const getTransactionsByEmployee = ({ employeeId }: RequestByEmployeeParams) => {\n  if (!employeeId) {\n    throw new Error(\"Employee id cannot be empty\")\n  }\n\n  return data.transactions.filter((transaction) => transaction.employee.id === employeeId)\n}\n\nexport const setTransactionApproval = ({ transactionId, value }: SetTransactionApprovalParams): void => {\n  const transaction = data.transactions.find(\n    (currentTransaction) => currentTransaction.id === transactionId\n  )\n\n  if (!transaction) {\n    throw new Error(\"Invalid transaction to approve\")\n  }\n\n  transaction.approved = value\n}\n"],"mappings":"AAQA,OAAOA,QAAQ,MAAM,mBAAmB;AAExC,MAAMC,qBAAqB,GAAG,EAAE;AAEhC,MAAMC,IAA4D,GAAG;EACnEC,SAAS,EAAEH,QAAQ,CAACG,SAAS;EAC7BC,YAAY,EAAEJ,QAAQ,CAACI;AACzB,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGA,CAAA,KAAkBH,IAAI,CAACC,SAAS;AAE5D,OAAO,MAAMG,wBAAwB,GAAGA,CAAC;EACvCC;AACsB,CAAC,KAAuC;EAC9D,IAAIA,IAAI,KAAK,IAAI,EAAE;IACjB,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;EACxC;EAEA,MAAMC,KAAK,GAAGF,IAAI,GAAGN,qBAAqB;EAC1C,MAAMS,GAAG,GAAGD,KAAK,GAAGR,qBAAqB;EAEzC,IAAIQ,KAAK,GAAGP,IAAI,CAACE,YAAY,CAACO,MAAM,EAAE;IACpC,MAAM,IAAIH,KAAK,CAAE,gBAAeD,IAAK,EAAC,CAAC;EACzC;EAEA,MAAMK,QAAQ,GAAGF,GAAG,GAAGR,IAAI,CAACE,YAAY,CAACO,MAAM,GAAGJ,IAAI,GAAG,CAAC,GAAG,IAAI;EAEjE,OAAO;IACLK,QAAQ;IACRV,IAAI,EAAEA,IAAI,CAACE,YAAY,CAACS,KAAK,CAACJ,KAAK,EAAEC,GAAG;EAC1C,CAAC;AACH,CAAC;AAED,OAAO,MAAMI,yBAAyB,GAAGA,CAAC;EAAEC;AAAoC,CAAC,KAAK;EACpF,IAAI,CAACA,UAAU,EAAE;IACf,MAAM,IAAIP,KAAK,CAAC,6BAA6B,CAAC;EAChD;EAEA,OAAON,IAAI,CAACE,YAAY,CAACY,MAAM,CAAEC,WAAW,IAAKA,WAAW,CAACC,QAAQ,CAACC,EAAE,KAAKJ,UAAU,CAAC;AAC1F,CAAC;AAED,OAAO,MAAMK,sBAAsB,GAAGA,CAAC;EAAEC,aAAa;EAAEC;AAAoC,CAAC,KAAW;EACtG,MAAML,WAAW,GAAGf,IAAI,CAACE,YAAY,CAACmB,IAAI,CACvCC,kBAAkB,IAAKA,kBAAkB,CAACL,EAAE,KAAKE,aACpD,CAAC;EAED,IAAI,CAACJ,WAAW,EAAE;IAChB,MAAM,IAAIT,KAAK,CAAC,gCAAgC,CAAC;EACnD;EAEAS,WAAW,CAACQ,QAAQ,GAAGH,KAAK;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}